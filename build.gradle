plugins {
    id 'java'
    id "com.google.protobuf" version "0.8.13"
//    id 'org.gradle.test-retry' version '1.3.0'
    // create the container before our tests start
    id("com.avast.gradle.docker-compose") version "0.14.0"
}

group = 'org.example'
version = '1.0-SNAPSHOT'
// fix for Execution failed for task ':processResources'. > Entry filter_message.proto is a duplicate but no duplicate handling strategy has been set.
// while generating protos .class file
allprojects {
    apply plugin: 'java'
    tasks.withType(Copy).all {
        duplicatesStrategy 'exclude'
    }
}
repositories {
    mavenCentral()
}
test {
    //fetches the suites from command line, if suite not present it will run testng file
    def suiteFileName = project.hasProperty('suite') ? project.suite : 'src/test/resources/testng.xml'
    useTestNG{
        useDefaultListeners = true
        suites suiteFileName
    }
//    retry {
//        maxRetries = 3
//    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.3.1'
    implementation group: 'org.apache.poi', name: 'poi', version: '5.0.0'
    // convert java object to json
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // convert json into string
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    // Jars for protobuf
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.25.2'
    implementation 'io.grpc:grpc-protobuf:1.32.1'
    implementation 'io.grpc:grpc-stub:1.32.1'
    implementation 'io.grpc:grpc-netty:1.32.1'

    // to parse string json to protobuf message
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.25.2'

    //logs
    implementation 'org.apache.logging.log4j:log4j-api:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'

    implementation group: 'org.testng', name: 'testng', version: '7.9.0'
    implementation group: 'com.aventstack', name: 'extentreports', version: '5.1.1'
    implementation group: 'com.relevantcodes', name: 'extentreports', version: '2.41.2'

    implementation group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.12.655'
    compileOnly group: 'software.amazon.awssdk', name: 'aws-sdk-java', version: '2.23.21'

    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'

    // to convert java object into json
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.16.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.16.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.16.1'

    // dependency to remove escape character from string/json
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.11.0'
// https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.41.0'

    // https://mvnrepository.com/artifact/io.qameta.allure/allure-maven
    implementation group: 'io.qameta.allure', name: 'allure-maven', version: '2.8'





}
//Set the proto and test, main src path

sourceSets {
    main {
        java.srcDirs = ['src/main/java','src/main/proto','build/generated/source/proto/main/grpc','build/generated/source/proto/main/java',
        'src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java','src/main/resources']
    }
}
tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
//to generate .classes file from proto
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.31.1"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
            }
        }
    }
}